
#pragma kernel CSMain
#include "Assets/Shaders/General/colorSpaces.cginc"
/*
This shader doesn't care how the data was created, 
it simply renders the image on the screen based on the parameters
TODO: document the variables
*/

RWTexture2D<float4> Result;

Texture2D<float4> Tiling;

// how many real pixels per computation pixel
uint _ReduceAmount;
// if true there are more computation pixels than real pixels
bool _Superresolution;
struct res {
	uint iter; 
	bool finished;
	float offset;
	float angle;
}; 
//Two buffers in caase of upscaling
bool _Upscaling;
RWStructuredBuffer<res> _IterBuffer;
RWStructuredBuffer<res> _OldIterBuffer;


uint _MaxIter;
uint _OldPixelWidth;


//Used when renderign at high res
bool _RenderExact;

//Used to transport colors
int _ColorArrayLength;
StructuredBuffer<float4> _Colors;
//Whether to use continous escape time
bool _Smooth;
//What type of gradient
int _Type;
// how many iterations per color
float _ColorStrength;
float4 getColor(res res) {
	//at this moment the interior is allways black
	float4 InColor = float4(0.0, 0.0, 0.0, 1.0f);


	if (!res.finished || res.iter >= _MaxIter) {
		return InColor;
	}

	if (res.iter == 0) {
		res.iter = 1;
	}
	float iter;
	if (_Smooth) {
		iter = (float)res.iter - res.offset;
	}
	else {
		iter = (float)res.iter;
	}

	float baseRatio = iter/_ColorStrength;
	int baseColorIdx = (int)(floor(baseRatio) % _ColorArrayLength);
	int upColorIdx = (int)((floor(baseRatio) + 1) % _ColorArrayLength);
	float ratio = baseRatio % 1;
	
	if (_Type == 5) {
		//for Tilings, they need to be disconected or have the geometry of M.C. Escher square limit in order for it to look good
		// A way to generate those tiles proceduraly: http://roy.red/posts/building-eschers-square-limit/
		uint tw, th;
		Tiling.GetDimensions(tw, th);
		uint2 tileId; 
		//Here the 1- needs to be remoced if the tiles are shrinking in the downward direction
		tileId.y = (1-res.offset) * (float)th;
		float normalizedAngle;
		if (res.angle < 0) {
			normalizedAngle = (res.angle + 2* PI) / 2 / PI;
		}
		else {
			normalizedAngle = (res.angle)/ 2 / PI;
		}
		tileId.x = normalizedAngle*(float)tw;
		return Tiling[tileId];
	}
	if (_Type == 6) {
		//Rings
		uint tw, th;
		Tiling.GetDimensions(tw, th);
		uint2 tileId;
		float radius =res.offset;
		tileId.x = (1.0 + res.offset * cos(res.angle)) * tw / 2;
		tileId.y = (1.0 + res.offset * sin(res.angle)) * th / 2;
		return Tiling[tileId];


	}

	return lerpColors(_Colors[baseColorIdx],_Colors[upColorIdx], ratio,_Type,_Smooth);
	

	 
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	uint width, height;
	Result.GetDimensions(width, height);
	uint textureX = id.x;
	uint textureY = id.y;


	uint reducedWidth = width;
	if (_RenderExact) {
		Result[id.xy] = getColor(_IterBuffer[textureX + textureY * reducedWidth]);
		return;
	}

	if (_Superresolution) {
		textureX *= _ReduceAmount;
		textureY *= _ReduceAmount;
		reducedWidth *= _ReduceAmount;
	}
	else { 
		textureX /= _ReduceAmount;
		textureY /= _ReduceAmount;
		reducedWidth /= _ReduceAmount;
	}

	int textureIdx = textureX + textureY * reducedWidth;

	if (_Upscaling) {
		if (_IterBuffer[textureIdx].finished) {
			Result[id.xy] = getColor(_IterBuffer[textureIdx]);
		}
		else {
			int oldTextureX = id.x;
			int oldTextureY = id.y;
			uint oldReducedWidth = width;
			if (_Superresolution) {
				oldTextureX *= _OldPixelWidth;
				oldTextureY *= _OldPixelWidth;
				oldReducedWidth *= _OldPixelWidth;
			}
			else {
				oldTextureX /= _OldPixelWidth;
				oldTextureY /= _OldPixelWidth;
				oldReducedWidth /= _OldPixelWidth;
			}

			int oldTextureIdx = oldTextureX + oldTextureY * oldReducedWidth;
			Result[id.xy] = getColor(_OldIterBuffer[oldTextureIdx]);
		}
	}

	else {
		Result[id.xy] = getColor(_IterBuffer[textureIdx]);
	}
    
	
	
}
