#pragma kernel CSMain


/*
This shader calculates the mandelbrot set using floats or doubles

It works by making a few iterations per frame, this allows to keep the frames high 
while calculating images in high resolution or high detail.
If the value for the coresponding pixel is not part of the set, the iteration process is skipped 
*/

#pragma multi_compile FLOAT DOUBLE
#pragma multi_compile MANDELBROT BURNING_SHIP MANDEL3 MANDEL4


#if FLOAT
#define TYPE float
#define TYPE2 float2
#elif DOUBLE
#define TYPE double
#define TYPE2 double2
#endif



RWTexture2D<float4> Result;


float2 _PixelOffset;

uint _MaxIter;
uint _IterPerCycle = 10;
TYPE _Scale;
TYPE _OffsetX;
TYPE _OffsetY;
int _BailoutRadius;
TYPE _BailoutRadiusSQ;
StructuredBuffer<TYPE> _DataBuffer;
uint _RenderWidth;
int _FrankensteinOffsetX;
int _FrankensteinOffsetY;

struct res {
	uint iter;
	bool finished;
	float offset;
}; 
RWStructuredBuffer<res> _IterBuffer;

struct Pixel {
	TYPE CurrentZX;
	TYPE CurrentZY;
	uint iter;
	bool finished;
	float offset;
};

RWStructuredBuffer<Pixel> _MultiFrameData;


int _ShiftX;
int _ShiftY;

uint _Register;



float getOffset(float2 squares) {
	float logz = log((squares.x + squares.y)) / 2.0;
	float res = log(logz / log(_BailoutRadius)) / log(2.0);
	res = clamp(res, 0.0, 1.0);
	return res;
}

TYPE2 mulComplex(TYPE2 a, TYPE2 b) {
	return TYPE2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}
uint getIteration(TYPE2 possition, TYPE2 InitialZ, int idx) {
	TYPE2 c = possition;
	uint iter = 0;
	TYPE2 z = InitialZ;
	TYPE2 squares = TYPE2(z.x * z.x, z.y * z.y);
	while (squares.x + squares.y < _BailoutRadiusSQ) {
		if (iter >= (_IterPerCycle)) {

			_MultiFrameData[idx].CurrentZX = z.x;
			_MultiFrameData[idx].CurrentZY = z.y;
			if (_MultiFrameData[idx].iter >= _MaxIter) {
				_MultiFrameData[idx].finished = true;
			}
			return iter;
		}
//This part Is responsible for calculating the iteration
#if MANDELBROT
		z.y = 2 * z.x * z.y + c.y;
		z.x = squares.x - squares.y + c.x;
#elif BURNING_SHIP
		z.y = abs(2 * z.x * z.y) + c.y;
		z.x = squares.x - squares.y + c.x;
#elif MANDEL3
		z = mulComplex(z, mulComplex(z, z)) + c;
#elif MANDEL4
		z = mulComplex(mulComplex(z, z), mulComplex(z, z)) + c;
#endif

		squares.x = z.x * z.x;
		squares.y = z.y * z.y;


		iter++;
	}
	_MultiFrameData[idx].finished = true;
	_MultiFrameData[idx].offset = getOffset((float2)squares);
	return iter;


}


[numthreads(8, 8, 1)]

void CSMain(uint3 id : SV_DispatchThreadID)
{

	uint width, height;
	Result.GetDimensions(width, height);
	_BailoutRadiusSQ = (TYPE)_BailoutRadius * _BailoutRadius;

	//Get data form buffer
	_Scale = _DataBuffer[0];
	_OffsetX = _DataBuffer[1];
	_OffsetY = _DataBuffer[2];


	// Get the dimensions of the RenderTexture

	//Get id of pixel
	uint pixelId = id.x + id.y * width + width * height * _Register;
	int currentIter = 0;


	//check if further computation is nesesary
	if (!_MultiFrameData[pixelId].finished) {
		// Transform pixel to correct range
		TYPE2 scale = _Scale;
		TYPE2 uv = ((TYPE2)id.xy + _PixelOffset - TYPE2(width / 2, height / 2)) * scale;
		// add offset
		uv += TYPE2(_OffsetX, _OffsetY);
		//Turned out the image was flipped this was added to reflip it
		//It might have introduced some hidden bugs
		uv.y = -uv.y;

		//Iterate
		if (_MultiFrameData[pixelId].iter == 0) {
			currentIter = getIteration(uv, TYPE2(0.0, 0.0), pixelId);
		}
		else {
			currentIter = getIteration(uv, TYPE2(_MultiFrameData[pixelId].CurrentZX, _MultiFrameData[pixelId].CurrentZY), pixelId);
		}
		//update iteration count


		_MultiFrameData[pixelId].iter += currentIter;

	}

	//upadte data for the next frame
	int iterId = id.x + _FrankensteinOffsetX + (id.y + _FrankensteinOffsetY) * _RenderWidth;

	_IterBuffer[iterId].iter = _MultiFrameData[pixelId].iter;
	_IterBuffer[iterId].finished = _MultiFrameData[pixelId].finished;
	_IterBuffer[iterId].offset = _MultiFrameData[pixelId].offset;
}
