#pragma kernel CSMain

#pragma multi_compile Q_VERY_LOW Q_LOW Q_MED Q_HIGH Q_VERY_HIGH Q_ULTRA Q_ULTRA_HIGH Q_SUPER Q_MEGA Q_SUPER_MEGA

#if Q_VERY_LOW
#define PRECISION 4
#elif Q_LOW
#define PRECISION 6
#elif Q_MED
#define PRECISION 8
#elif Q_HIGH
#define PRECISION 10
#elif Q_VERY_HIGH
#define PRECISION 12
#elif Q_ULTRA
#define PRECISION 14
#elif Q_ULTRA_HIGH
#define PRECISION 16
#elif Q_SUPER
#define PRECISION 18
#elif Q_MEGA
#define PRECISION 20
#elif Q_SUPER_MEGA
#define PRECISION 24
#endif

#include "Assets/Shaders/General/fpnum.cginc"

RWTexture2D<float4> Result;

float2 _PixelOffset;

uint _MaxIter;
uint _IterPerCycle = 5;


StructuredBuffer<int> _PossitionBuffer;
static const int MiddleX = 0;
static const int MiddleY = PRECISION;
static const int Scale = PRECISION * 2;


static const int CurX = 0;
static const int CurY = PRECISION;
static const int iter = 2 * PRECISION;
static const int finished = 2 * PRECISION + 1;
static const int iterOffset = 2 * PRECISION + 2;
static const int PixelSize = 2 * PRECISION + 3;


int _ShiftX;
int _ShiftY;

uint _Register;

RWStructuredBuffer<int> _FpMultiframeBuffer;
RWStructuredBuffer<int> _LastMultiframeData;

bool _reset;
bool _pixelized;
bool _pixelizationBase;
struct res {
	uint iter;
	bool finished;
	float offset;
};
RWStructuredBuffer<res> _IterBuffer;

float getOffset(float2 squares) {
	float logz = log(squares.x + squares.y) / 2.0;
	float res = log(logz / log(2.0)) / log(2.0);
	res = clamp(res, 0.0, 1.0);
	return res;
}
uint getIter(uint2 pixel, uint width, uint height, uint idx) {
	digits cX;
	digits cY;
	digits zX;
	digits zY;
	digits squareX;
	digits squareY;
	digits scale;
	digits offset;
	digits middle;
	[unroll]
	for (int j = 0; j < PRECISION; j++) {
		zX.digits[j] = _FpMultiframeBuffer[idx + CurX + j];
		zY.digits[j] = _FpMultiframeBuffer[idx + CurY + j];
		scale.digits[j] = _PossitionBuffer[Scale + j];
		offset.digits[j] = 0;
	}
	offset.digits[0] = pixel.x - width / 2;
	offset = multiply(add(offset, setDouble((double)_PixelOffset.x)), scale);
	[unroll]
	for (int a = 0; a < PRECISION; a++) {
		middle.digits[a] = _PossitionBuffer[MiddleX + a];
	}
	cX = add(offset, middle);
	for (int b = 0; b < PRECISION; b++) {
		offset.digits[b] = 0;
	}

	offset.digits[0] = pixel.y - height / 2;
	offset = multiply(add(offset, setDouble((double)_PixelOffset.y)), scale);
	[unroll]
	for (int c = 0; c < PRECISION; c++) {
		middle.digits[c] = _PossitionBuffer[MiddleY + c];
	}
	cY = add(offset, middle);


	int iter = 0;
	squareX = square(zX);
	squareY = square(zY);
	[fastopt]
	for (uint i = 0; i < _IterPerCycle; i++) {



		zY = add(cY, multiply(add(zX,zX), zY));
		zX = add(subtract(squareX, squareY), cX);
		squareX = square(zX);
		squareY = square(zY);
		iter++;


		if (!inBounds(squareX, squareY)) {
			_FpMultiframeBuffer[idx + iterOffset] = digitBase * getOffset(float2(toFloat(squareX), toFloat(squareY)));
			_FpMultiframeBuffer[idx + finished] = true;
			return iter;
		}
	}
	for (int l = 0; l < PRECISION; l++) {
		_FpMultiframeBuffer[idx + CurX + l] = zX.digits[l];
	}
	for (int k = 0; k < PRECISION; k++) {
		_FpMultiframeBuffer[idx + CurY + k] = zY.digits[k];
	}


	return iter;


}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{

	uint width, height;
	Result.GetDimensions(width, height);
	 
	
	uint basePixelId = id.x + id.y * width + width * height * _Register;

	uint pixelId = basePixelId * PixelSize;

	int currentIter = 0;

	
	if (_ShiftX != 0 || _ShiftY != 0) {
		int oldBasePixelId;
		int min;
		int max;
		if (_Register == 0) {
			min = width * height;
			max = width * height *2;
			oldBasePixelId = basePixelId - _ShiftX - _ShiftY * width + width * height;	
		}
		else if (_Register == 1) {
			min = 0;
			max = width * height;

			oldBasePixelId = basePixelId - _ShiftX - _ShiftY * width - width * height;
		}
		int oldPixelId = oldBasePixelId * PixelSize;
		
		if (int(id.x) <= _ShiftX || //left border
			int(width - id.x) <= -_ShiftX || //rigth  border
			int(id.y) <= _ShiftY || //top border
			int(height - id.y) <= -_ShiftY ||//bottom border
			oldBasePixelId<min|| oldBasePixelId>max){ 
			
			
			//this part  should be rerendered
			for (int a = 0; a < PixelSize; a++) {
				_FpMultiframeBuffer[pixelId + a] = 0;
			}

		}
		else {

		

			//this part can be salvaged
			for (int b = 0; b < PixelSize; b++) {
				_FpMultiframeBuffer[pixelId + b] = _FpMultiframeBuffer[oldPixelId + b];
			}
		}




	}
	else if (_pixelized) {
		uint prePixelIdx = (id.x + id.y * width) * PixelSize;
		for (int b = 0; b < PixelSize; b++) {
			_FpMultiframeBuffer[pixelId + b] = _LastMultiframeData[prePixelIdx + b];
		}
	}
	else if (_reset) {
		for (int k = 0; k < PixelSize; k++) {
			_FpMultiframeBuffer[pixelId + k] = 0;
		}
	}
	

	//check if further computatuin is nesesary
	if (!_FpMultiframeBuffer[pixelId + finished]) {

		currentIter = getIter(id.xy, width, height, pixelId);

		_FpMultiframeBuffer[pixelId + iter] += currentIter;
		if ((uint)_FpMultiframeBuffer[pixelId + iter] >= _MaxIter) {
			_FpMultiframeBuffer[pixelId + finished] = true;
		}


	}

	_IterBuffer[id.x + id.y * width].iter = _FpMultiframeBuffer[pixelId + iter];
	_IterBuffer[id.x + id.y * width].finished = _FpMultiframeBuffer[pixelId + finished];
	_IterBuffer[id.x + id.y * width].offset = (float)(_FpMultiframeBuffer[pixelId + iterOffset]) / digitBase;


}
