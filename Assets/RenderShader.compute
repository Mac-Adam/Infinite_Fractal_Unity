// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
int _PixelWidth;
struct res {
	uint iter;
	bool finished;
};
RWStructuredBuffer<res> _IterBuffer;
uint _MaxIter;

bool _Sigmoid;
int _ColorStrength;
float sigmoid(float x) {
	return(exp(x) / (1.0 + exp(x)));
}
float pow(float x, int exp) {
	float res = x;
	for (int i = 0; i < exp - 1; i++) {
		res *= x;
	}
	return res;
}
float4 getColor(res res) {
	float4 InColor = float4(0.0, 0.0, 0.0, 1.0f);
	float4 Colors[5];

	Colors[0] = float4(0.086, 0.376, 0.533, 1.0);
	Colors[1] = float4(0.29, 0.435, 0.647, 1.0);
	Colors[2] = float4(0.753, 0.839, 0.875, 1.0);
	Colors[3] = float4(0.859, 0.529, 0.239, 1.0);
	Colors[4] = float4(0.71, 0.098, 0.525, 1.0);


	if (!res.finished || res.iter >= _MaxIter) {
		return InColor;
	}
	if (res.iter == 0) {
		res.iter = 1;
	}
	float baseRatio = (float)res.iter / (_ColorStrength);
	int baseColorIdx = (int)(floor(baseRatio) % 5);
	int upColorIdx = (int)((floor(baseRatio) + 1) % 5);
	float ratio = baseRatio % 1;
	if (_Sigmoid) {
		float red = Colors[baseColorIdx].x + (Colors[upColorIdx].x - Colors[baseColorIdx].x) * sigmoid(20 * ratio - 5);
		float green = Colors[baseColorIdx].y + (Colors[upColorIdx].y - Colors[baseColorIdx].y) * sigmoid(20 * ratio - 10);
		float blue = Colors[baseColorIdx].z + (Colors[upColorIdx].z - Colors[baseColorIdx].z) * sigmoid(20 * ratio - 15);
		return float4(red, green, blue, 1.0);
	}
	else {
		return float4(Colors[baseColorIdx] + (Colors[upColorIdx] - Colors[baseColorIdx]) * (-2.0 * pow(ratio, 3) + 3.0 * pow(ratio, 2)));
	}

	 
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	uint width, height;
	Result.GetDimensions(width, height);
	
	int textureX = id.x / _PixelWidth;
	int textureY = id.y / _PixelWidth;
	int textureIdx = textureX + textureY * (width/ _PixelWidth);

    Result[id.xy] = getColor(_IterBuffer[textureIdx]);
	
}
