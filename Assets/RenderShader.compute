// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "Assets/colorSpaces.cginc"
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
int _PixelWidth;
struct res {
	uint iter;
	bool finished;
	float offset;
}; 
RWStructuredBuffer<res> _IterBuffer;
uint _MaxIter;


int _ColorArrayLength;
StructuredBuffer<float4> _Colors;
bool _Smooth;
int _Type;
int _ColorStrength;
float4 getColor(res res) {
	float4 InColor = float4(0.0, 0.0, 0.0, 1.0f);


	if (!res.finished || res.iter >= _MaxIter) {
		return InColor;
	}
	if (res.iter == 0) {
		res.iter = 1;
	}
	float iter;
	if (_Smooth) {
		iter = (float)res.iter - res.offset;
	}
	else {
		iter = (float)res.iter;
	}
	float baseRatio = iter/(float)_ColorStrength;
	int baseColorIdx = (int)(floor(baseRatio) % _ColorArrayLength);
	int upColorIdx = (int)((floor(baseRatio) + 1) % _ColorArrayLength);
	float ratio = baseRatio % 1;
	
	return lerpColors(_Colors[baseColorIdx],_Colors[upColorIdx], ratio,_Type,_Smooth);
	

	 
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	uint width, height;
	Result.GetDimensions(width, height);
	
	int textureX = id.x / _PixelWidth;
	int textureY = id.y / _PixelWidth;
	int textureIdx = textureX + textureY * (width/ _PixelWidth);

    Result[id.xy] = getColor(_IterBuffer[textureIdx]);
	//
	//float baseRatio = (float)id.x* _ColorArrayLength / (float)width;
	//int baseColorIdx = (int)(floor(baseRatio) % _ColorArrayLength);
	//int upColorIdx = (int)((floor(baseRatio) + 1) % _ColorArrayLength);
	//float ratio = baseRatio % 1;

	//float4 Color1 = _Colors[baseColorIdx];
	//float4 Color2 = _Colors[upColorIdx];

	//if (id.y > height*4 / 5) { //top -> bottom
	//	Result[id.xy] = lerpColors(Color1,Color2,ratio,0, _Smooth);
	//}
	//else if (id.y > height*3 / 5) {
	//	Result[id.xy] = lerpColors(Color1, Color2, ratio, 1, _Smooth);
	//}
	//else if (id.y > height * 2 / 5) {
	//	Result[id.xy] = lerpColors(Color1, Color2, ratio, 2, _Smooth);
	//}
	//else if (id.y > height / 5) {
	//	Result[id.xy] = lerpColors(Color1, Color2, ratio, 3, _Smooth);
	//}
	//else {
	//	Result[id.xy] = lerpColors(Color1, Color2, ratio, 4, _Smooth);
	//}

	
}
