// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "Assets/colorSpaces.cginc"
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
int _PixelWidth;
struct res {
	uint iter;
	bool finished;
	float offset;
};
RWStructuredBuffer<res> _IterBuffer;
uint _MaxIter;


int _ColorArrayLength;
StructuredBuffer<float4> _Colors;
bool _Smooth;
int _ColorStrength;
float4 getColor(res res) {
	float4 InColor = float4(0.0, 0.0, 0.0, 1.0f);


	if (!res.finished || res.iter >= _MaxIter) {
		return InColor;
	}
	if (res.iter == 0) {
		res.iter = 1;
	}
	float iter;
	if (_Smooth) {
		iter = (float)res.iter - res.offset;
	}
	else {
		iter = (float)res.iter;
	}
	float baseRatio = iter/(float)_ColorStrength;
	int baseColorIdx = (int)(floor(baseRatio) % _ColorArrayLength);
	int upColorIdx = (int)((floor(baseRatio) + 1) % _ColorArrayLength);
	float ratio = baseRatio % 1;
	
	return float4(_Colors[baseColorIdx] + (_Colors[upColorIdx] - _Colors[baseColorIdx]) * (-2.0 * pow(ratio, 3) + 3.0 * pow(ratio, 2)));
	

	 
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	uint width, height;
	Result.GetDimensions(width, height);
	
	int textureX = id.x / _PixelWidth;
	int textureY = id.y / _PixelWidth;
	int textureIdx = textureX + textureY * (width/ _PixelWidth);

    Result[id.xy] = getColor(_IterBuffer[textureIdx]);
	
	//
	//float4 Color1 = float4(1.0,0,0,1.0);
	//float4 Color2 = float4(0, 1.0, 1.0, 1.0);
	//if (id.y > height*2 / 3) { //top
	//	float4 c = Color1 + (Color2 - Color1) * ((float)id.x / (float)width);
	//	Result[id.xy] = c;
	//}
	//else if (id.y > height / 3) {
	//	float3 c0 = rgb2lch(Color1.xyz);
	//	float3 c1 = rgb2lch(Color2.xyz);
	//	float3 clch = c0 + (c1 - c0) * ((float)id.x / (float)width);
	//	float3 crgb = lch2rgb(clch);
	//	Result[id.xy] = float4(crgb.x, crgb.y, crgb.z, 1.0);
	//}
	//else {
	//	float3 c0 = rgb2lab(Color1.xyz);
	//	float3 c1 = rgb2lab(Color2.xyz);
	//	float3 clab = c0 + (c1 - c0) * ((float)id.x / (float)width);
	//	float3 crgb = lab2rgb(clab);
	//	
	//	Result[id.xy] = float4(crgb.x, crgb.y, crgb.z, 1.0);
	//}

}
