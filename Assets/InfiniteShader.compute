#pragma kernel CSMain
#include "Assets/fpnum.cginc"

RWTexture2D<float4> Result;

float2 _PixelOffset;

uint _MaxIter;
static const uint _IterPerCycle = 5;


StructuredBuffer<int> _PossitionBuffer;
static const int MiddleX = 0;
static const int MiddleY = fpPre;
static const int Scale = fpPre * 2;


static const int CurX = 0;
static const int CurY = fpPre;
static const int iter = 2 * fpPre;
static const int finished = 2 * fpPre + 1;
static const int PixelSize = 2 * fpPre + 2;


int _ShiftX;
int _ShiftY;

uint _Register;

RWStructuredBuffer<int> _FpMultiframeBuffer;
//4 int CurrentZX
//4 int CurretZY 
//int iter 
//int finished
bool _reset;

struct res {
	uint iter;
	bool finished;
};
RWStructuredBuffer<res> _IterBuffer;


uint getIter(uint2 pixel, uint width, uint height, uint idx) {
	digits cX;
	digits cY;
	digits zX;
	digits zY;
	digits squareX;
	digits squareY;
	digits scale;
	digits offset;
	digits middle;
	[unroll]
	for (int j = 0; j < fpPre; j++) {
		zX.digits[j] = _FpMultiframeBuffer[idx + CurX + j];
		zY.digits[j] = _FpMultiframeBuffer[idx + CurY + j];
		scale.digits[j] = _PossitionBuffer[Scale + j];
		offset.digits[j] = 0;
	}
	scale = Convert(scale);
	offset.digits[0] = pixel.x - width / 2;
	offset = multiply(add(offset, setDouble((double)_PixelOffset.x)), scale);
	[unroll]
	for (int a = 0; a < fpPre; a++) {
		middle.digits[a] = _PossitionBuffer[MiddleX + a];
	}
	middle = Convert(middle);
	cX = add(offset, middle);
	for (int b = 0; b < fpPre; b++) {
		offset.digits[b] = 0;
	}

	offset.digits[0] = pixel.y - height / 2;
	offset = multiply(add(offset, setDouble((double)_PixelOffset.y)), scale);
	[unroll]
	for (int c = 0; c < fpPre; c++) {
		middle.digits[c] = _PossitionBuffer[MiddleY + c];
	}
	middle = Convert(middle);
	cY = add(offset, middle);


	int iter = 0;
	squareX = square(zX);
	squareY = square(zY);
	[fastopt]
	for (uint i = 0; i < _IterPerCycle; i++) {



		zY = add(cY, multiply(add(zX,zX), zY));
		zX = add(add(squareX, Negate(squareY)), cX);
		squareX = square(zX);
		squareY = square(zY);
		iter++;


		if (!inBounds(squareX, squareY)) {
			_FpMultiframeBuffer[idx + finished] = true;
			return iter;
		}
	}
	for (int l = 0; l < fpPre; l++) {
		_FpMultiframeBuffer[idx + CurX + l] = zX.digits[l];
	}
	for (int k = 0; k < fpPre; k++) {
		_FpMultiframeBuffer[idx + CurY + k] = zY.digits[k];
	}


	return iter;


}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{

	uint width, height;
	Result.GetDimensions(width, height);
	 
	
	uint basePixelId = id.x + id.y * width + width * height * _Register;

	uint pixelId = basePixelId * PixelSize;

	int currentIter = 0;

	
	if (_ShiftX != 0 || _ShiftY != 0) {
		int oldBasePixelId;
		int min;
		int max;
		if (_Register == 0) {
			min = width * height;
			max = width * height *2;
			oldBasePixelId = basePixelId - _ShiftX - _ShiftY * width + width * height;	
		}
		else if (_Register == 1) {
			min = 0;
			max = width * height;

			oldBasePixelId = basePixelId - _ShiftX - _ShiftY * width - width * height;
		}
		int oldPixelId = oldBasePixelId * PixelSize;
		
		if (int(id.x) <= _ShiftX || //left border
			int(width - id.x) <= -_ShiftX || //rigth  border
			int(id.y) <= _ShiftY || //top border
			int(height - id.y) <= -_ShiftY ||//bottom border
			oldBasePixelId<min|| oldBasePixelId>max){ 
			
			
			//this part  should be rerendered
			for (int a = 0; a < PixelSize; a++) {
				_FpMultiframeBuffer[pixelId + a] = 0;
			}

		}
		else {

		

			//this part can be salvaged
			for (int b = 0; b < PixelSize; b++) {
				_FpMultiframeBuffer[pixelId + b] = _FpMultiframeBuffer[oldPixelId + b];
			}
		}




	}
	else if (_reset) {
		for (int k = 0; k < PixelSize; k++) {
			_FpMultiframeBuffer[pixelId + k] = 0;
		}
	}
	

	//check if further computatuin is nesesary
	if (!_FpMultiframeBuffer[pixelId + finished]) {

		currentIter = getIter(id.xy, width, height, pixelId);

		_FpMultiframeBuffer[pixelId + iter] += currentIter;
		if ((uint)_FpMultiframeBuffer[pixelId + iter] >= _MaxIter) {
			_FpMultiframeBuffer[pixelId + finished] = true;
		}


	}

	_IterBuffer[id.x + id.y * width].iter = _FpMultiframeBuffer[pixelId + iter];
	_IterBuffer[id.x + id.y * width].finished = _FpMultiframeBuffer[pixelId + finished];

}
